Advanced Financial Econometrics (trial and error document)

# Daniel coding
## Working
f_SVHeston <- function(T, n, theta, kappa, xi, rho) {
  
  # Setting horizon and discretization
  N <- T * n + 1
  dt <- 1/n
  
  # Initialization
  v0 <- theta # This always starts sigma_t^2 from theta
  
  # simulate v_t=sigma_t^2 which is a square root diffusion process
  dW <- rnorm(N, 0, sqrt(dt)) # increments of Brownian motion W
  v <- rep(v0, N)
  dB <- rho * dW + sqrt((1 - rho^2)) * rnorm(N, 0, sqrt(dt)) # increments of B
  
  for (j in 2:N) {
    v[j] <- v[j - 1] + kappa * (theta - v[j - 1]) * dt + xi * sqrt(v[j - 1]) * dB[j - 1]
  }
  
  v <- pmax(v, 0) # to avoid negative values caused by the discretization.
  sigma <- sqrt(v)
  X <- cumsum(sigma * dW)
  
  return(list(X = X, sigma = sigma))
}

# Example usage:
n <- 2340
dt <- 1/n
T <- 10
sigma0 <- 0.04/250
kappa <- 5/250
xi <- 0.50/250
rho <- -0.50

set.seed(123)
result <- f_SVHeston(T, n, sigma0, kappa, xi, rho)
X <- result$X
sigma <- result$sigma




## Not-working




###################################################################################################################
#                                                                                                                 #
#                                                   Pavel Coding                                                  #
#                                                                                                                 #
###################################################################################################################

Daniel comments:
This should work
f_SVHeston_for_pavel <- function(T, n, theta, kappa, xi, rho) {
  # Setting horizon and discretization
  N <- T * n + 1
  dt <- 1 / n
  
  # Initialization. This always starts sigma_t^2 from theta shape = 2*theta*kappa/(xi^2); 
  # Better option might be to start from the 
  # scale = 1/(2*kappa/(xi^2)); stationary distrubution of sigma_t^2 
  # v0 = gamrnd(shape,scale); %which is gamma
  v0 <- theta
  
  # Simulate v_t = sigma_t^2 which is a squared root diffusion process
  dW <- rnorm(N, mean = 0, sd = sqrt(dt))
  v <- rep(v0, N)
  dB <- rho * dW + sqrt((1 - rho^2)) * rnorm(N, mean = 0, sd = sqrt(dt)) # increments if B
  
  for (j in 2:N) {
    v[j] <- v[j - 1] + kappa * (theta - v[j - 1]) * dt + xi * sqrt(v[j - 1]) * dB[j - 1]
  }
  
  v <- pmax(v, 0) # to avoid negative values caused by the dicretization.
  sigma <- sqrt(v)
  X <- cumsum(sigma * dW)
  
  return(list(X = X, sigma = sigma))
}


# Plot done later

# Set parameter values
T <- 1 # time horizon
n <- 252 # number of time steps per year
theta <- 0.04 # long-term mean of volatility
kappa <- 2 # rate of mean reversion
xi <- 0.3 # volatility of volatility
rho <- -0.5 # correlation between the stock price and volatility

# Simulate the Heston model
sim <- f_SVHeston_for_pavel(T = T, n = n, theta = theta, kappa = kappa, xi = xi, rho = rho)

# Plot the simulated volatility and stock price
par(mfrow = c(2,1), mar = c(3, 3, 2, 1))
plot(sim$sigma, type = "l", xlab = "Time", ylab = "Volatility", main = "Simulated Volatility")
plot(sim$X, type = "l", xlab = "Time", ylab = "Price", main = "Simulated Stock Price")

set.seed(123)
result <- f_SVHeston(T, n, sigma0, kappa, xi, rho)
X <- result$X
sigma <- result$sigma

# Compute returns divided into T different days
r <- diff(X)
r <- matrix(r, ncol = T)

# Compute realized volatility on different days
RV <- colSums(r^2)

# Compute integrated volatility on different days
s <- matrix(sigma[-length(sigma)], ncol = T)
IV <- colMeans(s^2)

# Plotting sigma_t^2, RV and IV
a <- 100 * 250
time <- seq(0, T, dt)
plot(time, a * sigma^2, type = "l", col = "blue",
     xlab = "time", ylab = "volatility", ylim = c(0, 6))

################################################### Not - Working #######################################################
f_SVHeston_for_Pavel <- function(T, n, theta, kappa, xi, rho) {
  # Setting horizon and discretization
  N <- T * n + 1
  dt <- 1 / n
  
  # Initialization. This always starts sigma_t^2 from theta shape = 2*theta*kappa/(xi^2); 
  # Better option might be to start from the 
  # scale = 1/(2*kappa/(xi^2)); stationary distrubution of sigma_t^2 
  # v0 = gamrnd(shape,scale); %which is gamma
  v0 <- theta
  
  # Simulate v_t = sigma_t^2 which is a squared root diffusion process
  dW <- rnorm(N, mean = 0, sd = sqrt(dt))
  v <- rep(v0, N)
  dB <- rho * dW + sqrt((1 - rho^2)) * rnorm(N, mean = 0, sd = sqrt(dt)) # increments if B
  
  for (j in 2:N) {
    v[j] <- v[j - 1] + kappa * (theta - v[j - 1]) * dt + xi * sqrt(v[j - 1]) * dB[j - 1]
  }
  
  v <- pmax(v, 0) # to avoid negative values caused by the dicretization.
  sigma <- sqrt(v)
  X <- cumsum(sigma * dW)
  
  return(list(X = X, sigma = sigma))
}

# Set parameter values
T <- 1 # time horizon
n <- 252 # number of time steps per year
theta <- 0.04 # long-term mean of volatility
kappa <- 2 # rate of mean reversion
xi <- 0.3 # volatility of volatility
rho <- -0.5 # correlation between the stock price and volatility

# Simulate the Heston model
sim <- f_SVHeston_for_Pavel(T = T, n = n, theta = theta, kappa = kappa, xi = xi, rho = rho)

# Plot the simulated volatility and stock price
par(mfrow = c(2,1))
plot(sim$sigma, type = "l", xlab = "Time", ylab = "Volatility", main = "Simulated Volatility")
plot(sim$X, type = "l", xlab = "Time", ylab = "Price", main = "Simulated Stock Price")

################################################### working ##################################################





# Fowsi coding
## Working

## Not-working





