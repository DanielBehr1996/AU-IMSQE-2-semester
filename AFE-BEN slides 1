

Advanced Financial Econometrics:
Introduction to Realized Measures





###################################################################################################################
#                                                                                                                 #
#                                                   Daniel Coding                                                 #
#                                                                                                                 #
###################################################################################################################


Slide 10:
# Set the seed
set.seed(2023)
# Set discretization size
m <- 10000
delta <- 1/m

# Generate m independent standard Gaussian draws
Z <- rnorm(m)

# Compute Brownian motion path
W <- cumsum(sqrt(delta) * Z)

# Simulate Brownian motion at specific times t = p/m
simulate_BM <- function(p) {
  sqrt(p * delta) * sum(Z[1:p])
}

# RW
# Define function to generate random walk without drift
RW <- function(N, x0, mu, variance) {
  z <- cumsum(rnorm(n = N, mean = 0, sd = sqrt(variance)))
  t <- 1:N
  x <- x0 + t * mu + z
  return(x)
}

# Generate two independent random walks without drift
P1 <- RW(100, 0, 0, 0.002)


# Example usage
t <- seq(0, 1, length.out = m)
W_t <- sapply(t, simulate_BM)
W_t[0] <- 0 # It starts at 0, i.e. W_0 = 0.


# Brownian motion vs Random Walk
# Random Walk
set.seed(2023)
steps <- 100
walk <- numeric(steps)
walk[1] <- 0
for (i in 2:steps) {
  walk[i] <- walk[i-1] + sample(c(-1, 1), 1)
}
plot(walk, type="l", xlab="Step", ylab="Position", main = "Random Walk")

# Brownian motion
set.seed(2023)
steps <- 10000
sigma <- 1
dt <- 1
brownian_motion <- numeric(steps)
brownian_motion[1] <- 0
for (i in 2:steps) {
  brownian_motion[i] <- brownian_motion[i-1] + rnorm(1, mean=0, sd=sigma*sqrt(dt))
}
plot(brownian_motion, type="l", xlab="Step", ylab="Position", main = "Brownian motion")

# How to plot them
# Plotting
par(mfrow=c(1, 2))
plot(walk, type="l", xlab="Step", ylab="Position", main = "Random Walk")
plot(brownian_motion, type="l", xlab="Step", ylab="Position", main = "Brownian Motion")
library(ggplot2)
library(ggpubr)

walk_df <- data.frame(Step = 1:100, Position = walk)
bm_df <- data.frame(Step = seq(1, 10000, length.out = 100), Position = brownian_motion[seq(1, 10000, length.out = 100)])

plot1 <- ggplot() + 
  geom_line(data = walk_df, aes(x = Step, y = Position), color = "blue") + 
  ggtitle("Random Walk") + 
  xlab("Step") + 
  ylab("Position") + 
  theme_classic() + 
  theme(plot.title = element_text(hjust = 0.5))

plot2 <- ggplot() + 
  geom_line(data = bm_df, aes(x = Step, y = Position), color = "red") + 
  ggtitle("Brownian Motion") + 
  xlab("Step") + 
  ylab("Position") + 
  theme_classic() + 
  theme(plot.title = element_text(hjust = 0.5))
ggarrange(plot1, plot2, ncol = 2)


# Realized volatility
# Load necessary libraries
library(xts)
library(highfrequency)

# Create sample data
set.seed(123)
n_obs <- 1000
timestamps <- seq.POSIXt(from = as.POSIXct("2022-01-01 09:30:00"), by = "1 min", length.out = n_obs)
prices <- cumsum(rnorm(n_obs, mean = 0.01, sd = 0.02))
data <- data.frame(timestamps, prices)

# Convert data to an xts object with datetime index
data_xts <- xts(data$prices, order.by = data$timestamps)

# Compute realized volatility using the rCov() function
rv <- rCov(data_xts, alignBy = "minute")

# Print the first 10 rows of the realized volatility values
head(rv, n = 10)


# Univariate realized volatility
rv <- rCov(rData = sampleTData[, list(DT, PRICE)], alignBy = "minutes",
           alignPeriod = 5, makeReturns = TRUE)
rv

# Multivariate realized covariance matrix
rc <- rCov(rData = sampleOneMinuteData, makeReturns = TRUE)
rc



# Realized volatility (own function)
RV_all <- function(X) {
  n <- length(X)
  i <- 2:n
  RV <- sum((X[i]-X[i-1])^2)
  return(RV)
}

# Bipower Variation (own function)
BV <- function(x) {
  n <- length(x) 
  c <- pi/2
  BV <- c * sum(abs(x[-1] - x[-n]) * abs(x[-n] - x[-(n-1)]))
  return(BV)
}

# Heston model
f_SVHeston <- function(T, n, theta, kappa, xi, rho) {
  
  # Setting horizon and discretization
  N <- T * n + 1
  dt <- 1/n
  
  # Initialization
  v0 <- theta # This always starts sigma_t^2 from theta
  
  # simulate v_t=sigma_t^2 which is a square root diffusion process
  dW <- rnorm(N, 0, sqrt(dt)) # increments of Brownian motion W
  v <- rep(v0, N)
  dB <- rho * dW + sqrt((1 - rho^2)) * rnorm(N, 0, sqrt(dt)) # increments of B
  
  for (j in 2:N) {
    v[j] <- v[j - 1] + kappa * (theta - v[j - 1]) * dt + xi * sqrt(v[j - 1]) * dB[j - 1]
  }
  
  v <- pmax(v, 0) # to avoid negative values caused by the discretization.
  sigma <- sqrt(v)
  X <- cumsum(sigma * dW)
  
  return(list(X = X, sigma = sigma))
}

# Example usage:
n <- 2340
dt <- 1/n
T <- 10
sigma0 <- 0.04/250
kappa <- 5/250
xi <- 0.50/250
rho <- -0.50

set.seed(123)
result <- f_SVHeston(T, n, sigma0, kappa, xi, rho)
X <- result$X
sigma <- result$sigma

# Compute returns divided into T different days
r <- diff(X)
r <- matrix(r, ncol = T)

# Compute realized volatility on different days
RV <- colSums(r^2)

# Compute integrated volatility on different days
s <- matrix(sigma[-length(sigma)], ncol = T)
IV <- colMeans(s^2)


lse(x <= 1/2, 1 - 6 * x^2 + 6 * x^3, 2 * (1 - x)^3)
}



################################################### Not working ###################################################
# Truncated realized volatility:
TRV <- function(X, omega) {
  n <- length(X)
  un <- n - omega*n #### (rettelse, det skal være u_n = n^(-omega) )
  TRV <- sum((diff(X))^2 * (abs(diff(X))<=un))/((n-1)*un)
  return(TRV)
}

# Ved ikke hvordan du har lavet dine log returns, men det vidst noget i den er stil for funktionen #
trv_n <- function(omega) {
  u_n <- n^(-omega)
  trv_values <- (log_returns^2) * (abs(log_returns) <= u_n)
  return(sum(trv_values))
}

#####

power_variation <- function(path, p) {
  n <- length(path)
  delta <- 1/n
  sum((sqrt(n) * diff(path))^p) / n
}





###################################################################################################################
#                                                                                                                 #
#                                                   Pavel Coding                                                  #
#                                                                                                                 #
###################################################################################################################

###Code for slide 10 lecture 1 - Berz: How to simulate brownian motion
### Note the random walk is scaled with the same as the brownian motion with \sqrt(1/m)

library(ggplot2)

# Set the discretization size
m <- 10000
dt <- 1/m

# Generate m independent standard Gaussian draws for Brownian motion and random walk
Z_bm <- rnorm(m)
Z_rw <- rnorm(m)

# Initialize the Brownian motion path and random walk
W <- numeric(m)
W[1] <- 0
X <- numeric(m)
X[1] <- 0

# Loop through the time steps and calculate the Brownian motion path and scaled random walk without drift
for (i in 2:m) {
  W[i] <- W[i - 1] + sqrt(dt) * Z_bm[i]
  X[i] <- X[i - 1] + sqrt(dt) * Z_rw[i]
}

# Create a time vector
time <- seq(0, 1 - dt, dt)

# Plot the Brownian motion path and scaled random walk without drift
df <- data.frame(time = time, W = W, X = X)
ggplot(df) + 
  geom_line(aes(x = time, y = W, color = "Brownian Motion")) +
  geom_line(aes(x = time, y = X, color = "Scaled Random Walk without Drift")) +
  ggtitle("Comparison of Brownian Motion and Scaled Random Walk without Drift") +
  xlab("Time") +
  ylab("Value") +
  scale_color_manual(values = c("Brownian Motion" = "blue", "Scaled Random Walk without Drift" = "red"))

############################### Estimators: Realized, Bipower, Truncated volatility ##############################

# Generate random log-returns data
set.seed(42) # Set seed for reproducibility
n <- 1000 # Number of log-returns
log_returns <- rnorm(n, mean = 0, sd = 0.01) # Generate random log-returns with mean 0 and sd 0.01

# Define parameters for measures
c <- pi / 2
omega <- 0.1 # Choose your value for omega
u_n <- n^(-omega)

# Calculate values for each measure
rv_values <- log_returns^2
bv_values <- c * (abs(log_returns[-1]) * abs(log_returns[-length(log_returns)]))
trv_values <- (log_returns^2) * (abs(log_returns) <= u_n)

# Calculate the overall measures (RV_n, BV_n, and TRV_n)
rv_n <- sum(rv_values)
bv_n <- sum(bv_values)
trv_n <- sum(trv_values)

# Print results
cat("Realized Volatility (RV_n):", rv_n, "\n")
cat("Bipower Variation (BV_n):", bv_n, "\n")
cat("Truncated Realized Volatility (TRV_n):", trv_n, "\n")

# print first 10
# Extract the first 10 values for each measure
first_10_rv <- head(rv_values, 10)
first_10_bv <- head(bv_values, 10)
first_10_trv <- head(trv_values, 10)

# Print the first 10 values for each measure
cat("First 10 Realized Volatility values:\n")
print(first_10_rv)
cat("\nFirst 10 Bipower Variation values:\n")
print(first_10_bv)
cat("\nFirst 10 Truncated Realized Volatility values:\n")
print(first_10_trv)

# Code for varying Omega for truncated realized volatility. Notice the log-returns have higher std so we get different values for the range [0, ½]

# Load required libraries
if (!requireNamespace("ggplot2", quietly = TRUE)) {
  install.packages("ggplot2")
}
library(ggplot2)

# Function to calculate Truncated Realized Volatility for a given omega value
trv_n <- function(omega, log_returns) {
  n <- length(log_returns)
  u_n <- n^(-omega)
  trv_values <- (log_returns^2) * (abs(log_returns) <= u_n)
  return(sum(trv_values))
}

# Generate random log-returns data with a higher standard deviation. This code has a varying omega
set.seed(42) # Set seed for reproducibility
n <- 1000 # Number of log-returns
log_returns_high_sd <- rnorm(n, mean = 0, sd = 0.05) # Generate random log-returns with mean 0 and sd 0.05

# Define a range of omega values
omega_values <- seq(0.01, 0.49, by = 0.01)

# Calculate Truncated Realized Volatility for each omega value with higher standard deviation
trv_results_high_sd <- sapply(omega_values, function(omega) trv_n(omega, log_returns_high_sd))

# Create a data frame with the results
trv_df_high_sd <- data.frame(Omega = omega_values, TRV = trv_results_high_sd)

# Generate random log-returns data from a t-distribution
set.seed(42) # Set seed for reproducibility
n <- 1000 # Number of log-returns
degrees_of_freedom <- 5
log_returns_t <- rt(n, df = degrees_of_freedom) * 0.01 # Generate random log-returns from a t-distribution with 5 degrees of freedom

# Calculate Truncated Realized Volatility for each omega value with t-distribution
trv_results_t <- sapply(omega_values, function(omega) trv_n(omega, log_returns_t))

# Create a data frame with the results
trv_df_t <- data.frame(Omega = omega_values, TRV = trv_results_t)

# Print TRV results for log-returns with higher standard deviation
cat("Truncated Realized Volatility (Higher Standard Deviation):\n")
print(trv_df_high_sd)

# Print TRV results for log-returns from a t-distribution
cat("\nTruncated Realized Volatility (T-distribution):\n")
print(trv_df_t)

# Combine the data frames for plotting
trv_df_both <- rbind(data.frame(Distribution = "Higher Standard Deviation", trv_df_high_sd),
                     data.frame(Distribution = "T-distribution", trv_df_t))

# Create a single plot comparing both datasets
trv_plot_both <- ggplot(trv_df_both, aes(x = Omega, y = TRV, color = Distribution)) +
  geom_line() +
  labs(title = "Truncated Realized Volatility vs Omega (Comparing Distributions)",
       x = "Omega",
       y = "Truncated Realized Volatility")

# Display the plot
print(trv_plot_both)



###################################################################################################################
#                                                                                                                 #
#                                                   Fowsi Coding                                                  #
#                                                                                                                 #
###################################################################################################################









###################################################################################################################
#                                                                                                                 #
#                                                   Pavel Coding                                                  #
#                                                                                                                 #
###################################################################################################################




###################################################################################################################
#                                                                                                                 #
#                                                   Marcus Coding                                                 #
#                                                                                                                 #
###################################################################################################################









End of file
